name: Publish Dev Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    environment: ghcr:leanix-github-agent

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        continue-on-error: false
        with:
          arguments: build

      - name: Log in to the Container registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          labels: ${{ steps.meta.outputs.labels }}

      - name: Derive SBOM artifact name
        id: derive-artifact-name
        shell: bash
        run: |
          # These are outputs (not vars) so that they can be used as input to the upload step
          echo "SBOM_ARTIFACT_NAME=$(echo ${{ env.IMAGE_NAME }} | sed 's/\//_/g')" >> $GITHUB_OUTPUT
          echo "SBOM_DIR=./sbom" >> $GITHUB_OUTPUT

      - name: Generate SBOM artifact
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s --
          ./bin/syft --version
          ./bin/syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag-action.outputs.tag }} \
          --scope "all-layers" \
          --output "cyclonedx-json=${{ steps.derive-artifact-name.outputs.SBOM_DIR }}/${{ steps.derive-artifact-name.outputs.SBOM_ARTIFACT_NAME }}"

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.derive-artifact-name.outputs.SBOM_ARTIFACT_NAME }}
          path: ${{ steps.derive-artifact-name.outputs.SBOM_DIR }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
